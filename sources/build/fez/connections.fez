
# We are continuing to get the glyphs into the right forms; this time
# the focus is on the Nastaliq glyph selection - i.e. finding the right
# form for a glyph based on the glyph to its left.

Feature rlig {
  # Standard ligatures
  Routine StandardLigatures {
    Substitute LAMi1 ALIFf1 -> LAM_ALIFu1;
    Substitute LAMm1 ALIFf1 -> LAM_ALIFf1;
    Substitute ALIFu1 (LAMi1 LAMm1 HAYCf1) -> ALLAHu1;
  } IgnoreMarks;

  Routine HaycAlif {
    Substitute HAYCi1 haydb ALIFf1 -> HAYC_ALIFu1;
  };

  # Override with other final forms

  # All these manual rules must be added to NastaliqConnections.py
  Routine MoreFinaSelection {
    # These are for REf-group things which go to different final REs in their
    # medial form to in their initial form.
    Substitute AINm1 ( REf1 ) -> REf2;
    Substitute FEm1 ( REf1 ) -> REf2;
    Substitute HAYAm1 ( REf1 ) -> REf2;
    Substitute JIMm1 ( REf1 ) -> REf2;
    Substitute SINm1 ( REf1 ) -> REf2;
    Substitute TOEm1 ( REf1 ) -> REf2;

    Substitute [BEm1 TEm1] ( REf1 ) -> REf3;
    Substitute HAYCm1 ( REf1 ) -> REf3;
    Substitute MIMm1 ( REf1 ) -> REf3;
    Substitute SADm1 ( REf1 ) -> REf3;

    Substitute AINi1 ( REf1 ) -> REf2;
    Substitute HAYAi1 ( REf1 ) -> REf2;
    Substitute MIMi1 ( REf1 ) -> REf2;
    Substitute SINi1 ( REf1 ) -> REf2;
    Substitute TOEi1 ( REf1 ) -> REf2;

    Substitute HAYCi1 ( REf1 ) -> REf3;
    Substitute Hei1 ( REf1 ) -> REf3;
    Substitute SADi1 ( REf1 ) -> REf3;

    Substitute [BEi1 TEi1] ( BEf1 ) -> BEf2;
    Substitute [BEi1 TEi1] ( TEf1 ) -> TEf2;
    Substitute [BEi1 TEi1] [BEm1 TEm1] [BEm1 TEm1] ( REf1 ) -> REf3;
  } IgnoreMarks;

  Routine RaisedTooth {
    Substitute [SINm1 SINi1] (BEm1) [AINm1 AINf1] -> BEmsd3;
    Substitute [SINm1 SINi1] (TEm1) [AINm1 AINf1] -> TEmsd3;
    Substitute [SINm1 SINi1] (BEm1) [BEf1 TEf1] -> BEmsd12;
    Substitute [SINm1 SINi1] (TEm1) [BEf1 TEf1] -> TEmsd12;
    Substitute [SINm1 SINi1] (BEm1) [SADm1 SADf1 TOEm1 TOEf1] -> BEmsd10;
    Substitute [SINm1 SINi1] (TEm1) [SADm1 SADf1 TOEm1 TOEf1] -> TEmsd10;
    Substitute [SINm1 SINi1] (BEm1) [FEm1 FEf1] -> BEmsd4;
    Substitute [SINm1 SINi1] (TEm1) [FEm1 FEf1] -> TEmsd4;
    Substitute [SINm1 SINi1] (BEm1) [QAFf1 VAOf1] -> BEmsd15;
    Substitute [SINm1 SINi1] (TEm1) [QAFf1 VAOf1] -> TEmsd15;
    Substitute [BEi1 TEi1] (BEm1) [BEm1 TEm1] REf3 -> BEmsd13;
    Substitute [BEi1 TEi1] (TEm1) [BEm1 TEm1] REf3 -> TEmsd13;
  } IgnoreMarks;
};

# Swash glyphs
Feature swsh {
  LoadPlugin qalamTools.SuffixingSubstitute;
  Routine Swash {
    SuffixingSubstitute [BEf1 TEf1 GAFf1 KAFf1 FEf1] -> fs1;
    SuffixingSubstitute [BEu1 TEu1 GAFu1 KAFu1 FEu1 SINu1] -> us1;
    Substitute HAYCf1 -> HAYCf2;
    Substitute BEf2 -> BEfs2;
    Substitute TEf2 -> TEfs2;
  };


  # The Glyphs file will contain a set of information about selecting
  # connecting glyphs (what the Qalmi patent calls the Generic Selection
  # Table). Code in the Makefile will extract this information from the
  # Glyphs file and into a CSV file (rules.csv). The custom NastaliqConnections
  # plugin reads this CSV file and creates a set of reverse chaining
  # single substitution rules.
  # We have to define it here in swash and re-run it in rlig for complicated
  # reasons
  LoadPlugin qalamTools.NastaliqConnections;
  NastaliqConnections "sources/build/rules.csv";
};
Feature jalt {
  Routine SwashJalt {
    SuffixingSubstitute [BEf1 TEf1 GAFf1 KAFf1 FEf1] -> fs1;
    SuffixingSubstitute [BEu1 TEu1 GAFu1 KAFu1 FEu1 SINu1] -> us1;
  };
  Routine connections;
};

Feature rlig {
  Routine connections;
};

