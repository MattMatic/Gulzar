# Okay. This is going to be the trickiest part of the exercise:
# mainly dot collision avoidance. We have put collision avoidance
# in a file together with mark/mkmk positioning (even though it's
# not ideal) because when the FEZ plugin is looking for collisions,
# it needs to use the mark positioning rules to determine where
# the dots in each sequence start off.

# So we have a few preliminary things to do related to attachment
# positioning, and then we'll get into the dot collision avoidance code.

# First, load all the FEZ plugins we will use. They are all found in
# the `karakul` library.
LoadPlugin karakul.QuantizeAnchors;
LoadPlugin karakul.DotAvoidance;
LoadPlugin karakul.NastaliqKerning;

# To avoid collisions, we move dots up and down to alternate positions.
# e.g. `sdb` might move to `sdb.one` (one "position" lower) or `sdb.two`
# (two positions lower). Here we generate new anchors for the
# `sdb.one`, `sdb.two` etc. glyphs: `sdb.one` will be 200 units below
# `sdb`, `dda.two` will be 400 units above `dda`, etc.
# The correct value is best found with trial and error, but will be
# slightly more than a nukta height; obviously it should be as small
# as possible to stop the positions being too spaced out, but large
# enough to actually avoid collisions.
AddSpacedAnchors 200;

Include "shared.fez";

# Standard cursive attachment rule.
Feature curs {
  Routine CursiveAttachment { Attach &entry &exit cursive; } IgnoreMarks RightToLeft;
};

# Now we will do mark attachment, but first we will quantize the anchors
# so that the positions can be shared.
QuantizeAnchors 10;

Feature mark {
  Routine DoMarkBase {
    Attach &top &_top bases;
    Attach &ngtop &_ngtop bases;
    Attach &inside &_inside bases;
    Attach &bottom &_bottom bases;
    Attach &comma &_comma bases;

    # These anchors are not in the Glyphs source but were
    #created by the `AddSpacedAnchors` rule above.
    Attach &top.one &_top.one bases;
    Attach &top.two &_top.two bases;
    Attach &bottom.one &_bottom.one bases;
    Attach &bottom.two &_bottom.two bases;
    Attach &comma.one &_comma.one bases;
  };
  # Long re glyphs have their own toeda anchor, so put it there.
  Routine ReattachToeda {
    Attach &toeda &_toeda bases;
  };
};

# This part of the shaping rules deals with the relationship between
# initial characters (and particularly their dots) and the final
# characters of the previous "word" (note that "word" here means
# both separate words separated by a space character, and also runs of
# connected glyphs - e.g. "تاریک" is three "words": تا, ر, یک).
#
# The operations in this section will encompass both kerning
# (adjusting the amount of space between the end of one word and the
# start of the next) and dot avoidance (preventing dots from hitting
# bases).
#
# For example, in the word "ترین", the automatic kerning will
# have brought the RE and BE glyphs close together into a nice tight
# word shape, but the automatic kerning code ignores dots. Because the
# RE and BE are close together, the `ddb` dots in their natural placement
# would clash into the RE. The code below explains how best to either
# reposition the dots or re-kern the word image to avoid this clash.
# In this case, we want to drop the dots of the ی below the ر to keep
# the word image tight.
#
# Naturally, the rules for avoiding clashes are dependent not just on
# the two characters (the final consonant of one "word" and the initial
# consonant of the next "word") but also on two more factors: whether
# there is a space between the end of the "word" and the start of the
# next "word", and the *height* of the initial consonant.
# (The height of the final consonant will always be zero, because Urdu
# "words" have their left-most glyph placed on the baseline.) For
# example, in the case of "ترین" we needed to drop the BE dots to avoid
# the clash. But in a word like "تقریظ", the BE is closer to the baseline, the
# kerning is less and the RE does not end up "under" the BE, so the
# dots do not need to be moved. So what we are going to do is
# determine the height of a sequence, and then dispatch to a set of
# rules which handle the adjustments at that height. You will see this
# later. Each of these rules has a GSUB and a GPOS counterpart:
# substitutions will drop dots by moving them to the `.one` and
# `.two` forms; positioning rules will move them more arbitrarily, and
# also respace the word.

# First, though, we define a set of utility routines that we can
# call to move dots around and respace text.

# This just saves a lot of typing... But be careful to remember that
# @dots just means the dots in their "natural" position.
DefineClass @dots = [sdb ddb tdb haydb];
DefineClass @dots_one = [sdb.one ddb.one tdb.one haydb.one];
DefineClass @dots_two = [sdb.two ddb.two tdb.two];

# Drop dots one position, or replace `.yb` dots with `.one` dots.
Routine DropOne {
  Substitute [sdb ddb tdb haydb] -> $1.one;
  Substitute [sdb.yb ddb.yb tdb.yb haydb.yb] -> $1~yb.one;
};

# Drop dots two positions. (There is no haydb.two, because it looks silly.)
Routine DropTwo {
  Substitute [sdb ddb tdb] -> $1.two;
};

# Now some repositioning rules. This increases the advance width
# of the initial consonant "quite a bit", increasing the space between
# the start of one word and the end of the previous one.
Routine OpenSpace {
  Position (@inits <xAdvance=+280>) /tdb|haydb/;
  Position (@inits <xAdvance=+200>) /sdb|ddb/;
  Position (@inits <xAdvance=+200>) [@medis @finas];
  Position toeda (@inits <xAdvance=+200>);
}  UseMarkFilteringSet /db|toeda/;

# The following routines similarly adjust the spacing to various degrees.
Routine OpenMediumSpace {
  Position (@inits <xAdvance=+330>) /tdb|haydb/;
  Position (@inits <xAdvance=+250>) [@medis @finas];
  Position (@inits <xAdvance=+250>) /sdb|ddb/;
  Position toeda (@inits <xAdvance=+180>);
}  UseMarkFilteringSet /db|toeda/;

Routine OpenBigSpace {
  Position (@inits <xAdvance=+380>) /tdb|haydb/;
  Position (@inits <xAdvance=+300>) /sdb|ddb/;
  Position (@inits <xAdvance=+300>) [@medis @finas];
  Position toeda (@inits <xAdvance=+300>);
};

Routine OpenSmallSpace {
  Position (/JIMi/ <xAdvance=+200>) /tdb/;
  Position ([@inits @isols] <xAdvance=+150>) @all_above_marks;
  Position ([@inits @isols] <xAdvance=+150>) /db|da|[mf](sd)?\d+/;
  Position DAMMA ([@inits @isols] <xAdvance=+200>);
  Position @all_above_marks ([@inits @isols] <xAdvance=+160>);
}  UseMarkFilteringSet [tdb @all_above_marks];

Routine OpenTinySpace {
  Position (/JIMi/ <xAdvance=+150>) /tdb/;
  Position (@inits <xAdvance=+100>) /db|[mf](sd)?\d+/;
}   UseMarkFilteringSet /db/;

Routine OpenMediumSpaceUnlessSpace {
  Chain space.urdu (@inits ^OpenSmallSpace);
  Chain (@inits ^OpenMediumSpace);
};
Routine OpenSmallSpaceUnlessSpace {
  Chain space.urdu (@inits ^OpenTinySpace);
  Chain (@inits ^OpenSmallSpace);
};


# Sometimes the kerning isn't as dramatic as it should be, and you
# want to tighten it a bit more to ensure you have a good word image.
Routine Tighten  { Position (@inits <xAdvance=-150>); };
Routine TightenSlightly  { Position (@inits <xAdvance=-75>); };

# And sometimes the positioning is fine, but you need to fire a rule
# to stop more general rules from firing. Here are a couple of
# "do nothing" routines you can call (one in the GSUB part of
# the rule and one in the GPOS part) to terminate the selection early.
Routine DoNothing    {Substitute JIMi1 -> JIMi1; };
Routine DoNothingPos {Position (haydb.yb <xPlacement=0>); };

# These are a bit more "fancy" rules to adjust dots in very particular
# situations.
Routine RaiseSlightly { Position ([sdb tdb ddb] <yPlacement=+50>); };
Routine Raise    { Position ([sdb tdb ddb] <yPlacement=+100>); };
Routine RaiseALot { Position ([sdb tdb ddb] <yPlacement=+250>); };
Routine TopRight {
  Position ([sdb ddb] <yPlacement=+250 xPlacement=+50>);
  Position (tdb <yPlacement=+200 xPlacement=+50>);
};
Routine BottomLeft {Position ([sda sdb tdb ddb] <yPlacement=-200 xPlacement=-220>); };
# In Nastaliq, left is also down
Routine PushLeft {Position ([sdb tdb ddb] <xPlacement=-75 yPlacement=-50>); };
Routine PushLeftALot {Position ([@dots @dots_one] <xPlacement=-200 yPlacement=-100>); };
Routine DropUpperDots {
  Position (@long_re <xPlacement=0> [sda sdb tdb ddb] <yPlacement=-420 xPlacement=-200>); 
};

# If you don't want to move a dot a whole position, but you need to
# move it out of the way - or you've got to `tdb.two` and you *still*
# need to move the dots - you can call one of these routines.
Routine DropATinyBitMore {
  Position ([ddb sdb] <yPlacement=-120>);
  Position ([tdb] <yPlacement=-150>);
  Position ([sdb.one tdb.one ddb.one tdb.yb sdb.yb ddb.yb haydb.one] <yPlacement=-150>);
  Position ([tdb.two sdb.two ddb.two] <yPlacement=-220>);
  Position (sda <yPlacement=-50>);
};

Routine DropALotMore {
  Position ([tdb ddb sdb] <yPlacement=-240>);
  Position ([tdb.one ddb.one sdb.one tdb.yb sdb.yb ddb.yb] <yPlacement=-220>);
  Position ([tdb.two sdb.two] <yPlacement=-280>);
};

Routine OpenTinyIfUpperDots {
  Chain (@DOTi ^OpenTinySpace [sda dda tda]);
} UseMarkFilteringSet [sda dda tda];

# Finally, we have to handle the fact that the right-hand glyph itself
# might have a mark *above* it! We tuck the ر underneath the BE in رپر
# and it looks lovely, but then along comes ڑپر. When we are evaluating
# the main final-to-initial rules, we need to ignore above marks (otherwise)
# any toeda etc. on the initial glyph will stop the rule from matching,
# and we would have to duplicate every rule to match with/without the
# toeda!) so we can't handle ڑ in there.
#
# Instead, we have a separate lookup with different mark filtering rules
# and use that to add more space when the final glyph has an above mark.
Routine ClearUpperDots {
  Chain (FEu1 ^DoNothingPos);
  Chain (REf1 [tda sda toeda HAMZA_ABOVE] @inits ^OpenMediumSpace);
  Chain (@long_re [tda sda toeda HAMZA_ABOVE] @inits ^OpenMediumSpace);
  Chain ([@isols @finas] [tda sda toeda HAMZA_ABOVE] @inits ^OpenSmallSpace);
  # Sneaking in another rule here to handle overhanging marks
  Chain ([@isols @finas] [BEi8 TEi8] ^OpenSmallSpace [tda]);
  Chain ([@isols @finas] [BEi8 TEi8] ^OpenTinySpace [dda HAMZA_ABOVE]);
} ;

Routine TinyClearUpperDots {
  Chain (@long_re [tda sda toeda HAMZA_ABOVE] @inits ^OpenTinySpace);
} ;

DefineClass @narrow_inits = @inits & (width < 300);


# OK, here we go with the avoidance/spacing rules. To make the problem
# more tractable, we split the final glyphs into a few classes: dal-like
# glyphs (dal, isolated RE and "short" final RE), vao-like glyphs,
# kaf-like glyphs, mim-like glyphs, alif-like glyphs, long RE glyphs,
# and "big bowl" finals (LAM, JIM, NUN, etc). The definitions can be
# found in shared.fez.

# First, the substitution rules, which are responsible for dropping
# the dots of the initial glyph by substitution. In this case, we want
# to distinguish between words separated by a space glyph and separate
# portions of the same word image. To aid readability, dots following
# a space glyph should never be dropped. For example, in the sequence
# "کو برمجہ", the dot of the BE should stay in its normal position to
# help the reader know that the BE is the start of a word; but in
# "اکتوبر", the sequence "وبر" also appears at the same height but dot
# should drop to accommodate the VAO more tightly. However, in the
# positioning rules, it turns out that we want to ignore spaces and just
# consider the end of word / start of word glyphs. We do this by adding
# the `` flag to positioning rules - relying on the fact
# that we have defined `space.urdu` as a "ligature" for this very purpose.

# Anyway, let's go with substitution rules. These are the most
# font-specific part of the code. I recommend you start by ripping out
# all of these rules, and then testing a systematic set of words for
# each of the final groups to see what adjustments are needed. e.g. begin
# with دبہ, ربہ, ابہ, جمبہ, دبہ, ربہ, ابہ, جمبہ, دجہ, رجہ, اجہ, جمجہ,
# and so on. And then add exceptions for specific glyph combinations
# as needed. It's also very useful to add a comment with a sequence
# which shows why the rule is needed.

Routine AtHeight100sub {
    Chain ([@dal_like @vao_like] HAYCi10 @dots ^DropOne); # رہط
    Chain ([@dal_like @vao_like] JIMi5 @dots ^DropOne); # ???
    Chain (@long_re @DOTi @dots ^DropOne); # بغیریہ
    Chain @long_re (@alif_like @DOTi @dots ^DropOne); # سراپا
} UseMarkFilteringSet [@dots];

Routine AtHeight200sub {
    # Dot avoidance should normally fix this, but it cycles the dots the
    # wrong way. We want the leftmost to be lower.
    Chain ([@dal_like @vao_like] [@BEi @JIMi HAYCi2 HAYCi13] @dots @BEm @dots ^DropTwo); # وپید

    Chain ([@dal_like @vao_like] TEi5 tdb ^DropTwo); # وپھا
    Chain (@dal_like [BEi5 TEi5] @dots ^DoNothing); # ریھا - fix in position
    Chain ([@dal_like @vao_like] [BEi4 TEi4] @dots ^DoNothing); # فریقا
    Chain ([@dal_like @vao_like] [@BEi @JIMi /HAYCi/] @dots ^DropOne); # ریو ویو رچھ وچھ وپہر رہر

    Chain (@long_re [BEi10 TEi10] @dots ^DoNothing); # تقریظیں
    Chain (@long_re [@BEi @JIMi] @dots ^DropOne); # متجرپھ / مرجسا / جھرپو
    Chain (@long_re @BEi @BEm @dots ^DropOne); # مرتبہ
    Chain (@long_re /[KG]AFi/ @BEm @dots ^DropOne); # لتركية / مرگبا

} UseMarkFilteringSet [@dots];

Routine AtHeight400sub {
    Chain (@long_re [TEi15] @dots ^DropTwo); # طریق
    Chain (@long_re [@JIMi] @dots ^DropTwo); # یسرچر
    Chain ([@isols @finas] @DOTi @dots ^DoNothing [AINf1 JIMf1 QAFf1]); # رپع / ریخ

    Chain (@vao_like [BEi24 TEi24] @dots ^DropTwo); # ریس
    Chain (@dal_like [BEi24 TEi24] @dots ^DropTwo); # ریس

    Chain (@dal_like [@DOTi /FEi/] @DOTm @dots ^DropOne); # الرئیسة / رفین

    Chain (@vao_like [BEi5 TEi5] @dots ^DropTwo); # وپھر
    Chain (@dal_like [BEi5 TEi5] @dots ^DoNothing); # رپھر

    Chain ([@dal_like @vao_like @alif_like] [BEi9 TEi9] @dots ^DropTwo MIMf1); #  ملایم قدیم 

    Chain (@dal_like [BEi9 TEi9] @dots ^DropTwo); # قدیمی
    Chain (@vao_like [BEi9 TEi9] @dots ^DropTwo); # ویمو

    Chain ([@dal_like @vao_like] /MIMi/ @DOTm @dots ^DropOne); # المستخدمين

    Chain ([@dal_like @vao_like] [BEisd1 TEisd1] @dots ^DoNothing); # ڈیبٹ # Handle in Pos instead
    Chain ([@dal_like @vao_like] [@BEi] @dots ^DropOne); # دںبل دببل دیبل دپبل دمبل یریں

    Chain (@long_re [BEi4 TEi4] @dots ^DropOne); # طریقو
    Chain (@long_re [BEi5 TEi5] @dots ^DoNothing); # سرپھر
    Chain (@long_re [BEi24 TEi24] @dots ^DoNothing); # محیطزیست
    Chain (@long_re [BEi14 TEi14] @dots ^DoNothing); # پیریں
    Chain (@long_re @BEi @dots ^DropTwo); # مرببل

    Chain (@kaf_like /MIMi/ @DOTm @dots ^DropOne); # ءمیں

    Chain (@alif_like [TEisd1 BEisd1 TEi16] @dots ^DropOne); # ایتی
    Chain (@alif_like [BEi14 TEi14] @dots ^DropOne); # این
} UseMarkFilteringSet [@dots];

Routine AtHeight500sub {
    Chain (@alif_like @BEi [ddb tdb] ^DropTwo @DOTm @dots); # اپپس
    Chain (@vao_like @BEi [ddb tdb] ^DropTwo @DOTm @dots); # ویبگنگ
    Chain (@dal_like @BEi [ddb tdb] ^DropTwo @DOTm @dots); # ڈیبگنگ
    Chain ([@dal_like @vao_like] TEi1 @dots ^DropOne); # ریعقُو

} UseMarkFilteringSet [@dots];


# And now the positioning rules, again remembering that we need to
#  to avoid having to fiddle with the space glyph between
# final and initial.
Routine AtHeight0pos {
    Chain (@alif_like KAFi3 ^OpenSmallSpace); # اکا
    Chain (@alif_like ^ClearUpperDots [BEi8 TEi8]); # ئکا ایکا اپکا انکا اتکا اثکا
    Chain (@dal_like [BEi8 TEi8] ^OpenTinySpace); # رنگآ / رئکا ریکا رپکا 
    Chain (@dal_like [BEi3 TEi3] ^TightenSlightly); # جدید 
    Chain (@kaf_like @JIMi ^OpenTinySpace); # لعه خطآ
    Chain (@kaf_like /AINi/ ^OpenTinySpace); # غشته غصه
    Chain (@long_re @JIMi ^OpenSmallSpace @dots); # خضر خط
    Chain (@long_re sda @JIMi ^OpenSmallSpace @dots); # خضر خط
    Chain (@long_re @BEi ^OpenSmallSpace @dots); # مر یہ / سر جہا / سر چہا
    Chain (@long_re sda @BEi ^OpenSmallSpace @dots); # مر یہ / سر جہا / سر چہا
    Chain (@long_re ^ClearUpperDots sda @inits); # شیزگا
    Chain (@vao_like SINi10 ^OpenTinySpace); # متوسط
    Chain (@vao_like @JIMi ^TightenSlightly); # کوچک
    Chain ([@vao_like @dal_like] LAMi4 ^OpenSmallSpace); # زلف
    Chain ([@vao_like @dal_like] [sda dda] LAMi4 ^OpenSmallSpace); # زلف
    Chain ([@vao_like @dal_like @kaf_like] TEi10 ^OpenTinySpace @dots ^DropATinyBitMore); # وپط
    Chain ([@vao_like @dal_like @kaf_like] TEi4  @dots ^DropATinyBitMore); # ردیف
    Chain (@bigbowlfina @BEi ^OpenTinySpace); # ین یہ
    Chain (@vao_like /TOEi/ ^OpenTinySpace); # مؤظف
}  UseMarkFilteringSet [@dots @dots_one toeda sda dda];

Routine AtHeight200pos {
    Chain ([BARI_YEu1 BARI_YEf1] @inits ^OpenSmallSpace); # کےحقا

    Chain (@bigbowlfina [BEisd1 TEisd1] ^OpenMediumSpace [tdb ddb]); # میل پتہ
    Chain (@bigbowlfina /HAYCi/ ^OpenTinySpace haydb); # س ہی
    Chain (@bigbowlfina [BEi8 TEi8] ^OpenSmallSpace); # بی‌تکلف
    Chain (@bigbowlfina @BEi ^OpenSmallSpace sdb); # بخش‌بند
    Chain (@bigbowlfina [@BEi @JIMi /SINi/ /MIMi/] ^OpenTinySpace); # بین بو / نخستین خصو / عشق شکل / مطمئن می

    Chain ([@dal_like] [BEi5 TEi5] ^OpenSmallSpace [sdb ddb] ^TopRight); # ربھ / پربھا / ریھ / پریھا

    Chain ([@dal_like @vao_like] [HAYCi2 HAYCi13] @dots_one ^DropATinyBitMore); # وہی
    Chain ([@dal_like @vao_like] [TEi6 BEi6] @dots_one ^DropATinyBitMore); # وپہر
    Chain ([@dal_like @vao_like] [HAYCi5 HAYCi2 HAYCi13] ^OpenSmallSpace @dots); # ر ہی
    Chain ([@dal_like @vao_like] [BEi9 TEi9 BEi15 TEi15] ^OpenSpace @dots); # ر پم / ر پو
    Chain ([@dal_like @vao_like] [BEi24 TEi24] ^DoNothingPos); # پریسا
    Chain ([@dal_like @vao_like] [BEi7 TEi7] ^OpenSpace @dots); # ہ بحا
    Chain ([@dal_like @vao_like] [BEisd1 TEisd1] @dots ^DropATinyBitMore); # وپید

    Chain ([@dal_like @vao_like] @JIMi ^OpenTinySpace [sdb tdb]); # ہ چم

    Chain (@vao_like [BEi10 TEi10] ^OpenSmallSpace [@dots @dots_one]); # کچھ بصر
    Chain (@vao_like HAMZA_ABOVE @BEi ^OpenTinySpace);

    Chain ([@dal_like @vao_like] [TEi6 BEi6] @dots ^DoNothingPos); # کر یہُو

    Chain ([@dal_like @vao_like] ^ClearUpperDots [@BEi @JIMi HAYCi2 HAYCi13]);
    Chain ([@dal_like @vao_like] HAYCi17 ^DoNothingPos); # دہر 
    Chain (@dal_like /HAYCi/ ^OpenSmallSpace @dots); # رہم

    Chain (@dal_like ^ClearUpperDots @JIMi @dots_one); # دجم / زجو
    Chain (@dal_like ^ClearUpperDots [BEi8 TEi8]); # فزیکل
    Chain (@vao_like @JIMi @dots_one ^DropATinyBitMore); # وجم
    Chain ([@vao_like @dal_like] SINisd24 ^OpenTinySpace); # مؤسسه

    Chain (@long_re [BEi3 TEi3 BEi15 TEi15 BEi5 TEi5 JIMi24] ^TightenSlightly @dots_one ^DropATinyBitMore); # متجرپھ / مرجسا
    Chain (@long_re [BEisd1 TEisd1] ^OpenSmallSpace @dots_one @BEm @dots); # العَرَبِيّة
    Chain (@long_re [BEisd1 TEisd1] ^OpenSmallSpace @dots); # کنکشنز بنا
    Chain (@long_re JIMi7 ^OpenTinySpace); # خبر خجا
    Chain (@long_re ^ClearUpperDots @narrow_inits @DOTm @dots); # غزلیات
    Chain (@long_re ^ClearUpperDots @JIMi ^TightenSlightly @dots_one ^DropATinyBitMore); # جرجم / هرچند
    Chain (@long_re [@BEi @JIMi] ^OpenMediumSpace [ddb tdb]); # جھر پو
    Chain (@long_re [@BEi @JIMi] [@dots_one @dots_two] ^DropATinyBitMore); # ئبریٹ تقریظیں
    Chain (@long_re [@BEi @JIMi] ^OpenTinySpace @DOTm @dots_one ^DropATinyBitMore); # پھرتیر
    Chain (@long_re ^TinyClearUpperDots [BEi8 TEi8] @dots); # چہزنگل
    Chain (@long_re ^DropUpperDots [BEi8 TEi8]); # چہزنگل

    Chain (@long_re [TEisd1 BEisd1] ^TightenSlightly @medis); # مرتبہ
    Chain (@long_re [BEi5 TEi5] ^OpenTinySpace [sdb.two ddb.two tdb.two] ^DropATinyBitMore); # متجرپھ
    Chain (@long_re JIMi13 ^OpenBigSpace); # مفرحی


    Chain (@mim_like @BEi ^OpenTinySpace [tdb ddb]); # جم پت
    Chain (@mim_like /AINi/ ^OpenTinySpace); # ضخیم عو
    Chain (@mim_like /SADi/ ^OpenTinySpace); # عظیم ضعف

    Chain (@kaf_like [BEi1 TEi1] ^DoNothingPos); # یک پعا
    Chain (@kaf_like /TOEi/ ^Tighten); # صفحه طر
    Chain (@kaf_like @DOTi ^OpenSmallSpace @dots); # جب یہُو
    Chain (@kaf_like /SINi|SADi/ ^OpenTinySpace); # سه سیا / نهضت ضجه
    Chain (@kaf_like @dots @DOTi ^OpenSmallSpace @dots); # اب چہر

    Chain (@alif_like [BEi13 TEi13] ^DoNothingPos); # بجایی
    Chain (@alif_like TEisd1 ^OpenTinyIfUpperDots); # إثبات
    Chain (@alif_like TEi7 ^OpenTinySpace @dots); # ایجا
    Chain (@alif_like LAMi7 ^Tighten); # الجد
    Chain (@alif_like @BEi ^OpenTinySpace tdb); # اپھ

    Chain (@alif_like TEi15 @dots ^DropATinyBitMore); # ایو

    Chain ([REu1 REf1] ^ClearUpperDots /TOEi/); # بعدازظهر


}  UseMarkFilteringSet [@dots @dots_one sdb.two ddb.two tdb.two HAMZA_ABOVE];

Routine AtHeight400pos {
    Chain ([BARI_YEu1 BARI_YEf1] @inits ^OpenMediumSpace [ddb tdb]); # ےپیل
    Chain ([BARI_YEu1 BARI_YEf1] @inits ^OpenSmallSpace); # ےپیل
    Chain ([TOEf1 TOEu1] [BEisd1 TEisd1] ^OpenTinySpace); # ط پیٹرن

    Chain (@dal_like [BEi9 TEi9] ^TightenSlightly @dots_two MIMf1); #  فدیم
    Chain ([@vao_like @alif_like] [BEi9 TEi9] ^DoNothingPos @dots_two MIMf1); #  ملایم قدیم 

    Chain ([@dal_like @vao_like] /LAMi/ ^OpenTinySpace @DOTm @dots); # دلیل

    Chain (@alif_like [BEisd1 TEisd1] ^TightenSlightly sdb); # اببل
    Chain (@alif_like [@BEi @JIMi] @dots_one ^DropATinyBitMore); # نلایتی
    Chain (@alif_like /HAYCi/ ^DoNothingPos); # اہبل
    Chain (@alif_like TEi24 [ddb tdb] ^PushLeft); # ایس
    Chain (@alif_like [BEi9 TEi9 JIMi9] ^OpenMediumSpace [ddb tdb]); # اپم

    Chain (@long_re [BEi4 TEi4] @dots_one ^DropATinyBitMore); # طریقو
    Chain (@long_re [BEi5 TEi5] @dots ^TopRight); # سرپھر
    Chain (@long_re [BEi24 TEi24] ^OpenTinySpace @dots); # محیطزیست
    Chain (@long_re [BEi14 TEi14] ^OpenSmallSpace @dots ^RaiseSlightly); # پیریں
    Chain (@long_re ^TinyClearUpperDots [BEi16 TEi16] ^TightenSlightly @dots_two ); # لجزیر
    Chain (@long_re ^ClearUpperDots /[KG]AFi/ ^TightenSlightly ); # مرکز مزکز
    Chain (@long_re @BEi ^OpenSmallSpace @dots_two @DOTm [ddb haydb]); # جرپیل
    Chain (@long_re @BEi ^OpenSpace @dots_two @DOTm tdb); # جرپپل
    Chain (@long_re @BEi ^OpenTinySpace @DOTm @dots ); # مرںپل
    Chain (@long_re [BEisd1 TEisd1] ^OpenTinySpace @dots); # بغیر پیغا
    Chain (@long_re @BEi @DOTm @dots_one ^DropATinyBitMore); # جرںپل
    Chain (@long_re /SADi/ ^OpenTinySpace); # اصغر صقر
    Chain (@long_re ^TinyClearUpperDots @DOTi @dots_two); # چہزین
    Chain (REf1 ^ClearUpperDots /HAYAi/); # پڑھیں

    Chain (@dal_like ^ClearUpperDots @DOTi ^TightenSlightly @DOTm @dots_one); # الرئیسة

    Chain ([@dal_like @vao_like] [TEisd1 BEisd1] ^OpenTinySpace @dots [BEm13 TEm13]); # دیتی

    Chain (@dal_like /FEi/ ^TightenSlightly); # رقم / گرفتن

    Chain (@dal_like [BEi9 TEi9 JIMi9] ^OpenMediumSpace tdb); # رپم
    Chain (@dal_like [BEi9 TEi9 JIMi9] ^OpenTinySpace @dots); # فدیم
    Chain (@vao_like [BEi9 TEi9 JIMi9] ^OpenMediumSpace [ddb tdb]); # ہ پم
    Chain (@vao_like [BEi9 TEi9] ^OpenTinySpace @dots); # وجم
    Chain (@vao_like JIMi9 ^OpenMediumSpace @dots); # ہ بم

    Chain ([@dal_like @vao_like] [BEi5 TEi5] sdb ^TopRight); # ربھر
    Chain ([@dal_like @vao_like] [BEi5 TEi5] ^OpenTinySpace @dots ^TopRight); # ریھر رپھر

    Chain ([@dal_like @vao_like] [BEi3 TEi3] ^OpenTinySpace @dots_one ^DropATinyBitMore @BEm @dots); # ریین
    Chain ([@dal_like @vao_like] [BEisd1 TEisd1] @dots ^DropALotMore @DOTm [@dots @dots_one] ^DropALotMore ^DropATinyBitMore); # ڈیبٹ
    Chain ([@dal_like @vao_like] [BEisd1 TEisd1] @dots ^DropALotMore);

    Chain ([@dal_like @vao_like] [@BEi @JIMi] @dots_one ^DropATinyBitMore); # وچھیا / دیتی
    Chain ([@dal_like @vao_like] @JIMi ^OpenMediumSpaceUnlessSpace tdb); # و چھیا
    Chain ([@dal_like @vao_like] @JIMi ^OpenSmallSpace @dots); # و جھیا

    Chain ([@dal_like @vao_like] [TEi7 BEi7] ^DoNothingPos [ddb tdb]); # ریخ
    Chain ([@dal_like @vao_like] @DOTi ^OpenSmallSpace [ddb tdb]); # ر پر

    Chain (@vao_like /HAYCi/ ^OpenTinySpace @dots); # وہبل
    Chain (@dal_like /HAYCi/ ^OpenMediumSpace @dots); # رہق

    Chain (@dal_like        /MIMi/ ^TightenSlightly); # زمین

    Chain (@vao_like        FEi4 ^OpenTinySpace); # توقفگا

    Chain (@vao_like        /SADi/ ^Tighten [AINf1 JIMf1]); # وضع
    Chain (@vao_like        /SADi/ ^OpenTinySpace); # و صحنه
    Chain (@vao_like        /SINi10/ ^OpenTinySpace); # لوسطى
    Chain (@kaf_like        /SADi/ ^OpenTinySpace); # یت صحنه

    Chain (@kaf_like        @DOTi ^OpenSmallSpace tdb); # نہ پڑ
    Chain (@kaf_like @dots  @DOTi ^OpenTinySpace tdb); # پ پہلو
    Chain (@kaf_like        @inits ^OpenSmallSpace); # یت صحنه
    Chain (@kaf_like @dots  @inits ^OpenSmallSpace); # یت صحنه

    Chain (@bigbowlfina @DOTi ^OpenMediumSpace @dots); # میں پہلی
    Chain (@bigbowlfina @inits ^OpenTinySpace); # ی بز / ی قطع / ں مین
    Chain (HAMZAu1 @BEi ^OpenTinySpace); # ءنیت
    Chain (/MIM[uf]/ /MIMi/ ^OpenTinySpace); # م میں
    Chain (@dal_like ^ClearUpperDots @inits); # یڈشیت
} IgnoreLigatures UseMarkFilteringSet [@dots @dots_one @dots_two];

Routine AtHeight500pos {
    Chain ([BARI_YEu1 BARI_YEf1] @inits ^OpenSmallSpace); # پر سے
    Chain (@dal_like [BEi10 TEi10] ^DoNothingPos); # تقریظیں
    Chain (@dal_like [BEi7 TEi7] ^DoNothingPos); # ندبجن
    Chain (@dal_like [BEi14 TEi14] @dots_one ^DropATinyBitMore); # یریں
    Chain (@vao_like [BEi7 TEi7] ^OpenBigSpace @dots); # ویجیٹ
    Chain (@vao_like /FEi/ ^OpenTinySpace); # موفقیتآ
    Chain ([@dal_like @vao_like] [BEi7 TEi7] ^OpenTinySpace @dots_two ^DropATinyBitMore); # ویجیٹ

    Chain ([@dal_like @vao_like] /[KG]AFi/ ^OpenSmallSpace @BEm @dots); # پرکیلنڈ
    Chain ([@dal_like @vao_like] @BEi ^OpenTinySpace @DOTm @dots); #  توثیقی
    Chain ([@dal_like @vao_like] [BEi16 TEi16] ^OpenSmallSpace @dots); #  ہ یر
    Chain ([@dal_like @vao_like] [BEi15 TEi15] @dots ^DropATinyBitMore); #  وپق
    Chain ([@dal_like @vao_like] [BEi5 TEi5] ^OpenSmallSpace tdb ^BottomLeft); # وپھی, #27
    Chain ([@dal_like @vao_like] [BEi5 TEi5] @dots ^BottomLeft); # وپھی, #27
    Chain ([@dal_like @vao_like] [BEi1 TEi1] @dots ^PushLeftALot @medis [@medis @finas]); # ریعقُو
    Chain ([@dal_like @vao_like] @BEi ^DoNothingPos @dots_one ^DropATinyBitMore); # ھوین
    Chain ([@dal_like @vao_like] @BEi ^OpenTinySpace @dots); # اور پشتو
    Chain (@dal_like @JIMi ^OpenTinySpace); # رچینی
    Chain (@vao_like @JIMi ^OpenSmallSpace); # وجس
    Chain ([@dal_like @vao_like] /HAYCi/ ^OpenSmallSpace); # وجس
    Chain (@vao_like /SADi/ ^OpenTinySpace); # وضعیت

    Chain (@alif_like [BEi6 TEi6] ^OpenSmallSpace); # اپر
    Chain (@alif_like [BEi16 TEi16] ^DoNothingPos); # اپر
    Chain (@alif_like @BEi ^OpenTinySpace @dots); # ابلین
    Chain (@alif_like /TOEi/ ^OpenTinySpace); # اطمینا

    Chain (@long_re [BEi16 TEi16] ^Tighten @dots_two); # تحریر
    Chain (@long_re @DOTi ^OpenSmallSpace); # تقریظیں
    Chain (@long_re ^ClearUpperDots [BEi5 TEi5] @dots ^TopRight); # سرپھر

    Chain (@mim_like @DOTi ^OpenTinySpace tdb); #قلم پر
    Chain (@mim_like /SADi/ ^OpenTinySpace); # تصمیم صنعت

    Chain (@kaf_like [BEi1 TEi1] ^OpenTinySpace); # ثبت بعثت
    Chain (@kaf_like /MIMi/ ^OpenTinySpace); # موظف منظقه
    Chain (@kaf_like @DOTi ^OpenTinySpace tdb); # قہ پھیلا
    Chain (@kaf_like ^DoNothingPos); # ف تہجی
    Chain (@bigbowlfina @DOTi ^OpenSmallSpace @dots); # دی برم

    Chain ([@dal_like @vao_like] [BEi16 TEi16] ^DoNothingPos); # رپر
    Chain ([@dal_like @vao_like] [BEi24 TEi16] ^OpenSmallSpace @dots); # ویس
    Chain (@vao_like @BEi ^OpenTinySpace @dots); # اور پشتو

    Chain ([@isols @finas] [MIMi5 MIMi7] ^OpenSpace @DOTm @dots); # ومچھا
    Chain ([@isols @finas] @dots [MIMi5 MIMi7] ^OpenSpace @DOTm @dots ); # ومچھا
    Chain ([@isols @finas] @dots @DOTi ^OpenSpace ); # ومچھا
    Chain ([@dal_like @vao_like] ^ClearUpperDots); # ڈیمو
} IgnoreLigatures UseMarkFilteringSet [@dots sdb.one ddb.one tdb.one @dots_two];

Routine AtHeight600pos {
    Chain ([BARI_YEu1 BARI_YEf1] @DOTi ^OpenSmallSpace);
    Chain (@alif_like [BEi7 TEi7 LAMi7] ^OpenSmallSpace); # انجن / الحق
    Chain (@alif_like MADDA [BEi3 TEi3] ^OpenMediumSpace); # آنکھو
    Chain (@alif_like [BEi5 TEi5] ^OpenTinySpace @dots  ^BottomLeft); # ابھی
    Chain (@alif_like TEisd1 ^OpenSmallSpace [ddb tdb] BEm7); # اینجا
    Chain (@alif_like TEisd1 ^OpenTinySpace [ddb tdb]); # اینجا
    Chain (@alif_like @DOTi ^OpenSmallSpace [ddb tdb]); # اچھّی
    Chain TEi15 ([@dal_like @vao_like] TEisd1 ^OpenTinySpace); # توثیق
    Chain ([@dal_like @vao_like] JIMi5 ^OpenSpace @dots); # پوچھیں
    Chain (@dal_like [BEi7 TEi7] ^OpenSmallSpace @dots); # ندبجن
    Chain ([@dal_like @vao_like] [BEi5 TEi5] ^OpenSmallSpace tdb ^BottomLeft); # وپھی, #27
    Chain ([@dal_like @vao_like] [BEisd1 TEisd1] ^OpenBigSpace @dots BEm7); # رینج
    Chain (@bigbowlfina [BEi5 TEi5] ^OpenTinySpace @dots ^BottomLeft); # تین پھو
    Chain ([@isols @finas] [BEi5 TEi5] @dots ^BottomLeft); # وپھی, #27
    Chain ([@dal_like @vao_like] [BEi6 TEi6] ^OpenMediumSpace @dots); # رچینی
    Chain ([@dal_like @vao_like] @DOTi ^OpenSmallSpace @dots); # کو پہنچ
    Chain ([@dal_like @vao_like] @DOTi ^OpenTinySpace @dots_one ^DropATinyBitMore); # دیتی
    Chain (@dal_like /FEi/ ^TightenSlightly); # الرقیق
    Chain (@dal_like @DOTi ^DoNothingPos @medis AINf1); # ارتفع
    Chain (@dal_like @DOTi ^TightenSlightly); # رئیس
    Chain (@long_re @DOTi ^OpenMediumSpace tdb); # میر پشیمل

    Chain (@kaf_like BEi5 @dots ^TopRight); # نب بھی
    Chain (@kaf_like @inits ^OpenTinySpace tdb); # ک چھو
    Chain (@kaf_like @inits ^OpenTinySpace @DOTm @dots); # یت میں
    Chain (@kaf_like /SINi/ ^OpenTinySpace); # طت سطح
    Chain (@kaf_like ^DoNothingPos); # ف تہجی
    Chain (@bigbowlfina @DOTi ^OpenSmallSpace @dots); # تی ہین
    Chain (@bigbowlfina /SADi/ ^OpenTinySpace); # ن صبح

    Chain /TOE|LAM/ ([JIMf1 CH_YEf1] @JIMi ^OpenSmallSpace); # سطح خطخطی

    Chain ([@isols @finas] [toeda HAMZA_ABOVE] @DOTi ^OpenBigSpace @dots); # اچھّی
    Chain ([@isols @finas] [MIMi5 MIMi7] ^OpenTinySpace @DOTm sdb); # جومُجھ
    Chain ([@isols @finas] [MIMi5 MIMi7] ^OpenMediumSpace @DOTm [ddb tdb]); # ومچھا
    Chain ([@isols @finas] @dots [MIMi5 MIMi7] ^OpenTinySpace @DOTm @dots ); # جومُجھ
    Chain ([@dal_like @vao_like] ^ClearUpperDots); # ڈیمو
}  IgnoreLigatures UseMarkFilteringSet [@dots sdb.one ddb.one tdb.one toeda HAMZA_ABOVE MADDA];

# OK, phew. That was it!

# Now we need to actually call those rules for sequences of the given
# height.
Feature rlig {
  # AtHeight 0-99 AtHeight0sub;
  AtHeight 100-199 AtHeight100sub;
  AtHeight 200-399 AtHeight200sub;
  AtHeight 400-499 AtHeight400sub;
  AtHeight 500-649 AtHeight500sub;
  #AtHeight 650-900 AtHeight600sub;
};

# Believe it or not, the following three lines handle all the rest
# of the dot avoidance problems. In particular, they deal with the
# situation of consecutive dots in a sequence (e.g. تقر).
#
# The DotAvoidance plugin, which we loaded right at the top,
# enumerates every single sequence of repeated dotted glyphs, and
# works out whether or not they collide, substituting them if they
# do. There is a slight wrinkle here: which dot do you substitute?
# For dots below (پپر) the situation is simple: the left-most dot
# should be dropped, so that dots rise up from left to right.
# For dots above, the dots should also rise up from left to right,
# meaning that the *rightmost* glyph should be *raised*. The best
# way to do this is with a reverse chaining contextual substitution
# (GSUB8) because this works from right to left across the glyph
# sequence. However, the way GSUB8 lookups are stored is very
# inefficient, and if you try putting all the dot avoidance rules
# into a GSUB8 lookup the font won't build. So we have to put as
# many as we can into GSUB8, and the ones which don't fit are
# placed into a GSUB6 substitution which unfortunately raises the
# *leftmost* dot.
Feature rlig {
  DetectAndSwap top reverse;
  DetectAndSwap bottom;
  DetectAndSwap top;
};

# Allow users to manually modify dot positions
Feature ss01 {
  Routine ManualCycleOne {
    Substitute @dots -> @dots_one;
    Substitute [sdb.one ddb.one tdb.one] -> @dots_two;
    Substitute @dots_two -> [sdb ddb tdb];
  };
};
Feature ss02 {
  Routine ManualCycleTwo {
    Substitute [sdb ddb tdb] -> @dots_two;
    Substitute @dots_two -> [sdb.one ddb.one tdb.one];
    Substitute @dots_one -> @dots;
  };
};

Feature rlig {
  # This deals with some obnoxious situations like فققق
  Routine OtherFixes {
    Substitute FEi3 (dda) ALIFf1 -> dda.one;
    Substitute /FEi/ sda /FEm/ (dda.one) -> dda.two;
    Substitute [BEisd1 TEisd1] [sdb tdb ddb] TEm3 ([sdb.two ddb.two tdb.two]) [ALIFf1 ALIFf2 DALf1 HAYCf1 HAYCf2 GAFf1 KAFf1 LAM_ALIFf1] -> [sdb ddb tdb]; # پیدا
    Substitute [BEisd1 TEisd1] [sdb tdb ddb] TEm3 ([sdb.two ddb.two tdb.two]) -> [sdb.one ddb.one tdb.one]; # پیدا
    Substitute tdb TEm16 ([ddb.two tdb.two]) @long_re -> [ddb tdb];
  };

  Routine OtherFixes2 {
    Chain [BEisd1 TEisd1] [sdb tdb ddb] TEm3 ([sdb ddb tdb] ^PushLeftALot) [ALIFf1 ALIFf2 DALf1 HAYCf1 HAYCf2 GAFf1 KAFf1 LAM_ALIFf1];
    Chain tdb TEm16 ([ddb tdb] ^BottomLeft) @long_re;
  };
};

# Now we dispatch the height-specific positioning rules, just like
# we dispatched the substitution rules above.
Feature kern {
  AtHeight 0-199 AtHeight0pos;
  AtHeight 200-399 AtHeight200pos;
  AtHeight 400-499 AtHeight400pos;
  AtHeight 500-599 AtHeight500pos;
  AtHeight 600-999 AtHeight600pos;
};

# And finally, we do the mark-to-mark attachment rules
Feature mkmk {
  Routine DoMarkAttachment {
    Attach &top &_top marks;
    Attach &bottom &_bottom marks;
    Attach &bottom.yb &_bottom.yb marks;
  };
};

